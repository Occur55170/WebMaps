{"version":3,"file":"Wes-129a46ff.js","sources":["../../src/view/Wes.vue"],"sourcesContent":["<script>\nimport { computed, nextTick, onMounted, reactive } from 'vue'\nimport $ from 'jquery'\nimport { useStore } from 'vuex'\n\nimport { Feature, Map, View } from 'ol'\nimport XYZ from 'ol/source/XYZ'\nimport { Tile, Vector } from 'ol/layer'\nimport Select from 'ol/interaction/Select'\nimport { click } from 'ol/events/condition'\nimport { ScaleLine } from 'ol/control.js'\nimport VectorSource from 'ol/source/Vector.js'\nimport { Point } from 'ol/geom.js'\nimport { Icon, Style } from 'ol/style.js'\n\nimport OLCesium from 'olcs/OLCesium.js'\nimport Static from 'ol/source/ImageStatic.js'\n\nimport 'ol/ol.css'\nimport 'ol-ext/dist/ol-ext.css'\nimport Overlay from 'ol/Overlay'\nimport currentPositionImg from '@/assets/img/icon/currentPosition.svg'\n\nimport mapLayerList from '@/config/mapLayerList'\nimport baseMapList, { getBaseMapAll } from '@/config/baseMapList'\nimport { isEmpty } from '@/methods.js'\n\n\nexport default {\n    props: {},\n    setup(props, { emit }){\n        const getMapLayers = mapLayerList\n        const baseMaps = baseMapList\n        const store = useStore()\n        const state = reactive({\n            defaultCenter: [120.971859, 24.801583],\n            defaultCenterZoom: 14,\n            // defaultCenter: [121.326776, 24.655499],\n            // defaultCenterZoom: 14,\n            targetNum: 1,\n            conditionWrap: false,\n            layerSelect: false,\n            currentLayers: [],\n            layers: [],\n            mapLayers: computed(() => {\n                const result = state.layers.map((node, index) => {\n                    return {\n                        label: node.group_title,\n                        value: node.value,\n                        layers: node.group_layers,\n                        groupClass: node.group_class,\n                    }\n                })\n                return result\n            }),\n            selectLock: false,\n            mapCount: 1,\n            map1: null,\n            map2: null,\n            map1LayerStatus: [],\n            map2LayerStatus: [],\n            temp: {\n                map1BaseStatus: 0,\n                map2BaseStatus: 0,\n            },\n            deleteLightbox: false,\n            // 目前地圖狀態為2D or 3D\n            dimensionMap: {\n                map1: '2D',\n                map2: '2D',\n            },\n            toSearchDimensionStatus: computed(() => {\n                const target = state.targetNum === 1 ? 'map1' : 'map2'\n                return state.dimensionMap[target] === '2D'\n            }),\n            selectValueTemp: 0,\n            popup: {\n                nodeRef: null,\n                overlay: null,\n                popupId: 0,\n                coordinate: [],\n                popupData: '',\n            },\n            comSize: {\n                wrapHeight: '',\n                wrapWidth: '',\n            },\n            tribeQuery: {},\n        })\n\n        let ol3d = null\n        Cesium.Ion.defaultAccessToken = import.meta.env.VITE_Ol3D_TOKEN\n\n        const defaultView = new View({\n            projection: 'EPSG:4326',\n            center: state.defaultCenter,\n            zoom: state.defaultCenterZoom,\n            minZoom: 4,\n            maxZoom: 16,\n        })\n\n        // 初始化地圖\n        function initMap() {\n            state.map1 = new Map({\n                target: 'map1',\n                layers: [\n                    baseMapList.getBaseMapData(0)\n                ],\n                view: defaultView,\n                controls: [],\n            })\n\n            state.map1.addControl(new ScaleLine({\n                units: 'metric', // 比例尺單位\n            }))\n\n            onChangeDimensionMap('3D')\n            add()\n        }\n\n        function addPoint(targetLng, targetLat) {\n            const marker = new Vector({\n                source: new VectorSource({\n                    features: [\n                        new Feature({\n                            geometry: new Point([targetLng, targetLat]),\n                            population: 4000,\n                            rainfall: 500,\n                        }),\n                    ],\n                }),\n                style: new Style({\n                    image: new Icon({\n                        anchor: [0.5, 100],\n                        anchorXUnits: 'fraction',\n                        anchorYUnits: 'pixels',\n                        src: currentPositionImg,\n                    }),\n                }),\n            })\n\n            const target = state.targetNum === 1 ? 'map1' : 'map2'\n            state[target].addLayer(marker)\n        }\n\n        function mapControl({\n            action,\n            value,\n        }){\n            const mainMap = state.map1?.getTarget() == null ? 'map2' : 'map1'\n            const View = state[mainMap].getView()\n            switch (action){\n                case 'In':\n                    View.animate({\n                        zoom: View.getZoom() + 1,\n                    })\n                    break\n                case 'Out':\n                    View.animate({\n                        zoom: View.getZoom() - 1,\n                    })\n                    break\n                case 'toNorth':\n                    View.animate({\n                        rotation: 0,\n                    })\n                    break\n                case 'moveTo':\n                    if (value){\n                        const {\n                            xAxis,\n                            yAxis,\n                        } = value\n                        View.animate({\n                            center: [xAxis, yAxis],\n                            zoom: 17,\n                            duration: 100,\n                        })\n                    } else {\n                        navigator.geolocation.getCurrentPosition(function(pos){\n                            View.animate({\n                                center: [pos.coords.longitude, pos.coords.latitude],\n                                zoom: 17,\n                                duration: 100,\n                            })\n                            addPoint(pos.coords.longitude, pos.coords.latitude)\n                        })\n                    }\n                    break\n                case 'fullScreen':\n                    const target = document.getElementById(`map${state.targetNum}`)\n                    if (target.requestFullscreen){\n                        target.requestFullscreen()\n                    } else if (target.msRequestFullscreen){\n                        target.msRequestFullscreen()\n                    } else if (target.mozRequestFullScreen){\n                        target.mozRequestFullScreen()\n                    } else if (target.webkitRequestFullscreen){\n                        target.webkitRequestFullscreen()\n                    }\n                    break\n            }\n        }\n\n        function layerControl({ action, value }) {\n            const target = state.targetNum == 1 ? state.map1 : state.map2\n            const targetLayers = target?.getLayers()\n            switch (action) {\n                case 'layerMode':\n                    if (value.checked){\n                        let nestedSubNodeIndex = value.nestedSubNodeIndex\n                        // 點選父層後，刪除同樣子層的圖層，帶入當前選擇的圖層\n                        let isSingleTiles = state.layers[value.nodeIndex].group_layers[value.subNodeIndex].single_tiles\n                        let haveInfoBox = !isEmpty(state.layers[value.nodeIndex].group_layers[value.subNodeIndex].info_box)\n                        // 目標區塊目前是否在3D模式下\n                        if (state[`${state.targetNum == 1 ? 'map1' : 'map2'}LayerStatus`].includes('3D')) {\n                            if (!(isSingleTiles) || haveInfoBox) {\n                                const scene = ol3d.getCesiumScene()\n                                const imageryLayersCount = scene.imageryLayers.length;\n                                for (let i = 0; i < imageryLayersCount; i++) {\n                                    let layer = scene.imageryLayers.get(i)\n                                    let id = layer?.imageryProvider._resource?.queryParameters?.id\n                                    const imageNodeIndex = getMapLayers.getLayerIndex(id)?.nodeIndex\n                                    const imageSubNodeIndex = getMapLayers.getLayerIndex(id)?.subNodeIndex\n                                    if((value.nodeIndex == imageNodeIndex) && (value.subNodeIndex == imageSubNodeIndex)) {\n                                        scene.imageryLayers.remove(layer)\n                                    }\n                                }\n                                nestedSubNodeIndex = state.selectValueTemp\n                                value.id = getMapLayers.resetLayerId(value.id, 'nestedSubNode', state.selectValueTemp)\n                            }\n                            const request = getMapLayers.get3DLayer(state.layers[value.nodeIndex].group_layers[value.subNodeIndex], nestedSubNodeIndex, value.id)\n                            ol3d.getCesiumScene().imageryLayers.addImageryProvider(\n                                new Cesium.WebMapServiceImageryProvider(request)\n                            )\n                        } else {\n                            if (!(isSingleTiles) || haveInfoBox) {\n                                let layersAry = targetLayers.getArray()\n                                layersAry.forEach(element => {\n                                    if (!(element.get('id'))) { return }\n                                    if (element.get('id').includes(`node${value.nodeIndex}_subNode${value.subNodeIndex}_nestedSubNode`)) {\n                                        target.removeLayer(element)\n                                    }\n                                })\n                                nestedSubNodeIndex = state.selectValueTemp\n                                value.id = getMapLayers.resetLayerId(value.id, 'nestedSubNode', state.selectValueTemp)\n                            }\n                            let targetLayer = getMapLayers.getLayer(state.layers[value.nodeIndex].group_layers[value.subNodeIndex], nestedSubNodeIndex, value.id)\n                            target.addLayer(targetLayer)\n                            // FIXME: addSpecialLayerEvent(targetLayer.get('label'), targetLayer, value)\n                            if (['雷達回波預測', '累積雨量預測', '氣溫預測'].includes(targetLayer.get('label'))) {\n                                const { currentLayerKey, tilesImageUrls, imageExtent } = targetLayer.get('ext')\n                                const timeKey = value.id.split('_nestedSubNode')[0]\n                                if (state.temp?.[`${timeKey}count`] === undefined) {\n                                    state.temp[`${timeKey}count`] = currentLayerKey\n                                }\n                                state.temp[timeKey] = setInterval(function () {\n                                    state.temp[`${timeKey}count`] = state.temp[`${timeKey}count`] + 1 > 4 ? 0 : state.temp[`${timeKey}count`] + 1\n                                    let newSource = new Static({\n                                        url: tilesImageUrls[state.temp[`${timeKey}count`]],\n                                        projection: 'EPSG:4326',\n                                        imageExtent: imageExtent,\n                                        interpolate: true,\n                                    })\n                                    targetLayer.setSource(newSource)\n                                }, 1000)\n                            }\n                            if (['新竹縣原住民部落範圍', '近年歷史災害82處部落點位', '雨量站', '工程鑽探', '土石流潛勢溪流', '落石分布'].includes(targetLayer.get('label'))) {\n                                mapClickEvent(target, targetLayer.label)\n                                addSelectElement(value, targetLayer.get('label'))\n                            }\n                        }\n                        onMapLayerStatus('add', target.getTarget(), value.id)\n                    } else {\n                        // FIXME: 刪除3D狀態下的圖層\n                        if (state[`${state.targetNum == 1 ? 'map1' : 'map2'}LayerStatus`].includes('3D')) {\n                            const { id, nestedSubNodeIndex, nodeIndex, subNodeIndex } = value\n                            let pickedLayer = state.layers[nodeIndex].group_layers[subNodeIndex]\n                            const scene = ol3d.getCesiumScene()\n                            const imageryLayersCount = scene.imageryLayers.length;\n                            for (let i = 0; i < imageryLayersCount; i++) {\n                                let layer = scene.imageryLayers.get(i)\n                                const id = layer?.imageryProvider._resource?.queryParameters?.id\n                                const imageNodeIndex = getMapLayers.getLayerIndex(id)?.nodeIndex\n                                const imageSubNodeIndex = getMapLayers.getLayerIndex(id)?.subNodeIndex\n                                if(pickedLayer.title === id || ((nodeIndex == imageNodeIndex) && (subNodeIndex == imageSubNodeIndex))) {\n                                    scene.imageryLayers.remove(layer)\n                                }\n                            }\n                        } else {\n                            let layersAry = targetLayers.getArray()\n                            function removeLayersById() {\n                                const deleteKey = value.id.split('_nestedSubNode')[0]\n                                const toRemoveLayerId = layersAry.filter(element => element?.get('id')?.includes(deleteKey))\n                                toRemoveLayerId.forEach((node) => {\n                                    target.removeLayer(node);\n                                });\n                            }\n                            removeLayersById()\n                            if (state.layers[value.nodeIndex].group_layers[value.subNodeIndex].layer_type === \"WFS\") {\n                                addSelectElement(value);\n                                state.popup.popupId = 0\n                                state.popup.popupData = '';\n                                if (state.popup.overlay) {\n                                    target.removeOverlay(state.popup.overlay);\n                                    state.popup.overlay = null;\n                                }\n                            }\n                            if (['雷達回波預測', '累積雨量預測', '氣溫預測'].includes(state.layers[value.nodeIndex].group_layers[value.subNodeIndex].title)) {\n                                const timeKey = value.id.split('_nestedSubNode')[0]\n                                clearInterval(state.temp[timeKey]);\n                                delete state.temp[`${timeKey}count`]\n                            }\n                        }\n                        onMapLayerStatus('delete', target.getTarget(), value.id)\n                    }\n                    break\n                case 'selectLayerMode':\n                    if (state.selectLock){\n                        return\n                    }\n                    if (value.layerName === 'all'){\n                        const layersAry = targetLayers.getArray()\n                        const layersToRemove = layersAry.filter(node => !(node.get('id') === undefined))\n                        layersToRemove.forEach((node) => {\n                            layerControl({\n                                action: 'layerMode',\n                                value: { checked: false, ...getMapLayers.getLayerIndex(node.get('id')) },\n                            })\n                        })\n                    } else {\n                        layerControl({\n                            action: 'layerMode',\n                            value: { checked: false, ...getMapLayers.getLayerIndex(value.id) },\n                        })\n                    }\n                    break\n                case 'changeOrder':\n                    if (state.selectLock){\n                        return\n                    }\n                    const {\n                        nodeIndex,\n                        subNodeIndex,\n                        nestedSubNodeIndex,\n                    } = getMapLayers.getLayerIndex(value.id)\n                    const nowTileLayer = getMapLayers.getLayer(state.layers[nodeIndex].group_layers[subNodeIndex], nestedSubNodeIndex, value.id)\n                    if (value.movement === 'up'){\n                        if (value.key + 1 === targetLayers.getArray().length){\n                            return\n                        }\n                        const obj = {\n                            checked: false,\n                            nodeIndex,\n                            subNodeIndex,\n                            nestedSubNodeIndex,\n                            id: value.id,\n                        }\n                        layerControl({\n                            action: 'layerMode',\n                            value: obj,\n                        })\n                        targetLayers.insertAt(value.key + 1, nowTileLayer)\n                    }\n                    if (value.movement === 'down'){\n                        if (value.key - 1 === 0){\n                            return\n                        }\n                        const obj = {\n                            checked: false,\n                            nodeIndex,\n                            subNodeIndex,\n                            nestedSubNodeIndex,\n                            id: value.id,\n                        }\n                        layerControl({\n                            action: 'layerMode',\n                            value: obj,\n                        })\n                        targetLayers.insertAt(value.key - 1, nowTileLayer)\n                    }\n                    break;\n                case 'baseMap':\n                    state.temp[`map${state.targetNum}BaseStatus`] = value.baseId\n                    const newTileLayer = new Tile({\n                        preload: Infinity,\n                        name: value.name,\n                        label: value.label,\n                        type: value.mapType,\n                        baseId: value.baseId,\n                        source: new XYZ({\n                            url: value.url,\n                        }),\n                        crossOrigin: 'anonymous',\n                    })\n                    const layersAry = target?.getLayers().getArray()\n                    targetLayers.insertAt(0, newTileLayer)\n\n                    layersAry.forEach(element => {\n                        if (element.get('type') === 'base' && element.get('baseId') !== value.baseId){\n                            target.removeLayer(element)\n                        }\n                        return true\n                    })\n                    break;\n                case 'setOpacity':\n                    onChangeLayerOpacity(value.key, value.value)\n                    break;\n            }\n            getCurrentMapData()\n        }\n\n        // FIXME: 加入特殊圖層事件，addSpecialLayerEvent\n        function addSpecialLayerEvent(labelName, targetLayer, value) {\n            const target = state.targetNum == 1 ? state.map1 : state.map2\n            if (['雷達回波預測', '累積雨量預測', '氣溫預測'].includes(labelName)) {\n                const { currentLayerKey, tilesImageUrls, imageExtent } = targetLayer.get('ext')\n                const timeKey = value.id.split('_nestedSubNode')[0]\n                if (state.temp?.[`${timeKey}count`] === undefined) {\n                    state.temp[`${timeKey}count`] = currentLayerKey\n                }\n                state.temp[timeKey] = setInterval(function () {\n                    state.temp[`${timeKey}count`] = state.temp[`${timeKey}count`] + 1 > 4 ? 0 : state.temp[`${timeKey}count`] + 1\n                    let newSource = new Static({\n                        url: tilesImageUrls[state.temp[`${timeKey}count`]],\n                        projection: 'EPSG:4326',\n                        imageExtent: imageExtent,\n                        interpolate: true,\n                    })\n                    targetLayer.setSource(newSource)\n                }, 1000)\n            } else if (['新竹縣原住民部落範圍', '近年歷史災害82處部落點位', '雨量站', '工程鑽探', '土石流潛勢溪流', '落石分布'].includes(labelName)) {\n                mapClickEvent(target, labelName)\n                addSelectElement(value, labelName)\n            }\n        }\n\n        function getCurrentMapData() {\n            if (state[`${state.targetNum == 1 ? 'map1' : 'map2'}LayerStatus`].includes('3D')) {\n                state.currentLayers = []\n                const scene = ol3d.getCesiumScene()\n                const imageryLayersCount = scene.imageryLayers.length;\n                for (let i = 0; i < imageryLayersCount; i++) {\n                    let layer = scene.imageryLayers.get(i)\n                    let provider = layer.imageryProvider;\n                    if (provider instanceof Cesium.WebMapServiceImageryProvider) {\n                        state.currentLayers.push({\n                            label: provider._resource?.queryParameters.layers_name,\n                            id: provider._resource?.queryParameters.id,\n                            visible: 1,\n                        })\n                    }\n                }\n            } else {\n                const target = state.targetNum == 1 ? state.map1 : state.map2\n                const layers = target?.getLayers()?.getArray()\n                state.currentLayers = layers?.map(layer => {\n                    return {\n                        label: layer.get('label'),\n                        id: layer.get('id'),\n                        visible: layer.getVisible(),\n                    }\n                })\n            }\n        }\n\n        function onChangeDimensionMap(value) {\n            let target = state.targetNum == 1 ? state.map1 : state.map2\n            let targetLayers = target?.getLayers()\n            let ta = state.targetNum == 1 ? 'map1' : 'map2'\n            state.dimensionMap[ta] = value\n            if (value === '3D') {\n                // 先移除82處部落，後面補回\n                let layersArray = targetLayers.getArray()\n                const layerToRemove = layersArray.find(element => element.get('label').includes('近年歷史災害82處部落點位'))\n                if (layerToRemove) {\n                    state[`map${state.targetNum}`].removeLayer(layerToRemove);\n                }\n                drawDimensionMap(true)\n                state[`${ta}LayerStatus`].push('3D')\n            } else {\n                drawDimensionMap(false)\n                state[`${ta}LayerStatus`] = state[`${ta}LayerStatus`].filter(node => node !== '3D')\n                state[`map${state.targetNum}LayerStatus`].forEach(node => {\n                    let { nodeIndex, subNodeIndex, nestedSubNodeIndex } = getMapLayers.getLayerIndex(node)\n                    let nowTileLayer = getMapLayers.getLayer(state.layers[nodeIndex].group_layers[subNodeIndex], nestedSubNodeIndex, value.id)\n                    if (nowTileLayer.get('label').includes('近年歷史災害82處部落點位')) {\n                        layerControl({\n                            action: 'layerMode',\n                            value: {\n                                checked: true,\n                                nodeIndex: nodeIndex,\n                                subNodeIndex: subNodeIndex,\n                                nestedSubNodeIndex: nestedSubNodeIndex,\n                                id: node\n                            }\n                        })\n                    }\n                    return node\n                })\n            }\n        }\n\n        function drawDimensionMap(value) {\n            const target = state.targetNum == 1 ? state.map1 : state.map2\n            if(value) {\n                ol3d = new OLCesium({\n                    map: target,\n                    time() {\n                        return Cesium.JulianDate.now();\n                    },\n                    sceneOptions: {\n                        mapProjection: new Cesium.WebMercatorProjection()\n                    }\n                })\n                ol3d.setEnabled(true)\n                let scene = ol3d.getCesiumScene()\n                scene.terrainProvider = Cesium.createWorldTerrain({})\n                ol3d.setEnabled(true);\n            } else {\n                ol3d.setEnabled(false)\n            }\n        }\n\n        function onChangeLayerVisible(key) {\n            const target = state.targetNum == 1 ? state.map1 : state.map2\n            const targetLayers = target?.getLayers()\n            if (state.selectLock) { return }\n            let visibleStatus = !(targetLayers.getArray()[key].getVisible())\n            targetLayers.getArray()[key].setVisible(visibleStatus)\n            nextTick(() => {\n                getCurrentMapData()\n            })\n        }\n\n        function onChangeLayerOpacity(key, value) {\n            let target = state.targetNum == 1 ? state.map1 : state.map2\n            let targetLayers = target?.getLayers()\n            targetLayers.getArray()[key].setOpacity(Number(value))\n        }\n\n        function changeMapCount(qty){\n            if (state.mapCount === qty){\n                return\n            }\n            const otherMap = state.targetNum !== 1 ? 'map1' : 'map2'\n            state.mapCount = qty\n            const otherLayers = state[`${otherMap}LayerStatus`].filter(node => node !== '3D')\n            const otherLayersData = otherLayers.map(item => mapLayerList.getLayerIndex(item))\n            if (qty === 2){\n                state[otherMap] = new Map({\n                    target: otherMap,\n                    layers: [\n                        baseMapList.getBaseMapData(0),\n                        // TODO: check\n                        ...otherLayersData.map(node => getMapLayers.getLayer(state.layers[node.nodeIndex].group_layers[node.subNodeIndex], node.nestedSubNodeIndex, node.id)),\n                    ],\n                    view: defaultView,\n                    controls: [],\n                })\n                if (state[`${otherMap}LayerStatus`]?.indexOf('3D') !== -1){\n                    ol3d = new OLCesium({\n                        map: state[otherMap],\n                        time() {\n                            return Cesium.JulianDate.now();\n                        },\n                    })\n                    ol3d.setEnabled(true)\n                    let scene = ol3d.getCesiumScene({})\n                    scene.terrainProvider = Cesium.createWorldTerrain({})\n                }\n            }\n            if (qty === 1){\n                state[otherMap] = null\n                const element = document.getElementById(otherMap)\n                while (element.firstChild){\n                    element.removeChild(element.firstChild)\n                }\n            }\n        }\n\n        function changeTarget(value){\n            state.targetNum = value\n            const delToMap = state.targetNum !== 1 ? 'map1' : 'map2'\n            if (state.mapCount === 1){\n                // 目標地圖為空\n                if (!state[`map${value}`]){\n                    let otherLayers = state[`map${value}LayerStatus`].filter(node => node !== '3D')\n                    // TODO: 優化，把node0_subNode4_nestedSubNodeundefined移到最後面\n                    if (otherLayers.includes('node0_subNode4_nestedSubNodeundefined')){\n                        const a = otherLayers.filter(node => node !== 'node0_subNode4_nestedSubNodeundefined')\n                        otherLayers = [...a, 'node0_subNode4_nestedSubNodeundefined']\n                    }\n\n                    const otherLayersData = otherLayers.map(item => mapLayerList.getLayerIndex(item))\n                    state[`map${value}`] = new Map({\n                        target: `map${value}`,\n                        layers: [\n                            baseMapList.getBaseMapData(state.temp[`map${state.targetNum}BaseStatus`]),\n                            ...otherLayersData.map(node => {\n                                return getMapLayers.getLayer(state.layers[node.nodeIndex].group_layers[node.subNodeIndex], node.nestedSubNodeIndex, node.id)\n                            }),\n                        ],\n                        view: defaultView,\n                        controls: [],\n                    })\n\n                    mapClickEvent(state[`map${value}`])\n                    if (state[`map${value}LayerStatus`]?.indexOf('3D') !== -1){\n                        ol3d = new OLCesium({\n                            map: state[`map${value}`],\n                            time() {\n                                return Cesium.JulianDate.now();\n                            },\n                        })\n                        ol3d.setEnabled(true)\n                    }\n                }\n                // 非目標地圖的刪除\n                if (state[delToMap]){\n                    state[delToMap] = null\n                    const element = document.getElementById(delToMap)\n                    while (element.firstChild){\n                        element.removeChild(element.firstChild)\n                    }\n                }\n            }\n            nextTick(() => {\n                getCurrentMapData()\n            })\n        }\n\n        function conditionWrap() {\n            state.conditionWrap = !state.conditionWrap\n        }\n\n        function onMapLayerStatus(action, target, id){\n            if (action === 'add'){\n                state[`${target}LayerStatus`].push(id)\n            } else if (action === 'delete'){\n                const a = state[`${target}LayerStatus`].findIndex(node => node === id)\n                state[`${target}LayerStatus`].splice(a, 1)\n            } else {\n                console.log('error')\n            }\n        }\n\n        function mapClickEvent(target){\n            const selector = new Select({\n                layers: target?.getLayers()?.getArray(),\n                condition: click,\n            })\n            target.addInteraction(selector)\n            selector.on('select', (event) => {\n                const selectedFeatures = event.selected[0]\n                if (selectedFeatures){\n                    state.popup.overlay = new Overlay({\n                        element: state.popup.nodeRef,\n                        autoPan: true,\n                        autoPanAnimation: {\n                            duration: 250,\n                        },\n                    })\n                    state.popup.overlay.setPosition(event.mapBrowserEvent.coordinate)\n                    target.addOverlay(state.popup.overlay)\n                    // TODO: 截圖結構修改\n                    // TODO: 優化結構，獲取state.popupId.overlay方式修正，考慮整包selectedFeatures放進去\n                    // selectedFeatures.getKeys().forEach(key => console.log(`${key} -> ${selectedFeatures.get(key)}`))\n\n                    const selectIds = (selectedFeatures.getId() ?? selectedFeatures.getGeometryName()).split('.')\n                    state.popup.popupData = selectIds[0]\n                    state.popup.coordinate = event.mapBrowserEvent.coordinate\n                    if (selectIds[0] === '新竹縣原住民部落範圍'){\n                        state.popup.popupId = selectedFeatures.get('編號')\n                        return\n                    }\n                    if (selectIds[0] === '近年歷史災害82處部落點位'){\n                        state.popup.popupId = selectIds[1]\n                        return\n                    }\n                    if (selectIds[0] === '雨量站'){\n                        state.popup.popupId = selectedFeatures.get('Name')\n                        return\n                    }\n                    if (selectIds[0] === '工程鑽探'){\n                        console.log('選到工程鑽探')\n                        state.popup.popupId = selectedFeatures.get('name').split('_')[0]\n                        // state.popup.temp = selectedFeatures\n                        return\n                    }\n                    if (selectIds[0] === '土石流潛勢溪流'){\n                        state.popup.popupId = selectedFeatures.get('ID')\n                        state.popup.temp = selectedFeatures\n                        return\n                    }\n                    if (selectIds[0] === '落石分布'){\n                        state.popup.popupId = selectedFeatures.get('DATA_ID')\n                        state.popup.temp = selectedFeatures\n                    }\n                } else {\n                    target.removeOverlay(state.popup.overlay)\n                    state.popup.overlay = null\n                    state.popup = {\n                        nodeRef: null,\n                        overlay: null,\n                        popupId: 0,\n                        coordinate: [],\n                        popupData: '',\n                    }\n                }\n            })\n        }\n\n        function closeAreaData(){\n            const target = state.targetNum === 1 ? state.map1 : state.map2\n            target.removeOverlay(state.popup.overlay)\n            state.popup.overlay = null\n        }\n\n        // TODO: 優化 移除id判斷?\n        function addSelectElement(value, layerName){\n            const {\n                checked,\n                id,\n            } = value\n            if (!checked){\n                state.selectLayerOption = {}\n                return\n            }\n            if (layerName === '新竹縣原住民部落範圍'){\n                $.ajax({\n                    url: 'https://blueprint.indigenoustribe.tw/api/tribeQuery',\n                    method: 'GET',\n                    success: (res) => {\n                        state.tribeQuery = res\n                    },\n                    error: (res) => {\n                        console.log(res)\n                    },\n                })\n            }\n        }\n\n        function moveToMap(val){\n            const obj = {\n                action: 'moveTo',\n                value: {\n                    xAxis: val.WGS84.lng,\n                    yAxis: val.WGS84.lat,\n                },\n            }\n            mapControl(obj)\n        }\n\n        onMounted(async () => {\n            let getBaseData = $.ajax({\n                url: 'https://blueprint.indigenoustribe.tw/api/underLayers',\n                method: 'GET',\n            }).done(res => {\n                return res\n            })\n\n            let getLayerData = $.ajax({\n                url: 'https://blueprint.indigenoustribe.tw/api/layers',\n                method: 'GET',\n            }).done(res => {\n                return res\n            })\n\n            Promise.all([getBaseData, getLayerData]).then((value) => {\n                let result = value[0].data.map((node, nodeIndex) => {\n                    return {\n                        mapType: 'base',\n                        baseId: nodeIndex,\n                        onCurrent: false,\n                        ...node\n                    }\n                })\n                baseMapList.setBaseMapData(result)\n                state.temp.map1BaseStatus = 0\n                state.temp.baseMapList = getBaseMapAll()\n\n                state.layers = value[1].map((node, index) => {\n                    node.group_layers.forEach((sub, subIndex) => {\n                        let subNodeIndex = subIndex, nestedSubNodeIndex = undefined\n                        sub.id = `node${index}_subNode${subNodeIndex}_nestedSubNode${nestedSubNodeIndex}`\n\n                        if (!(sub.single_tiles)) {\n                            sub.tiles_list.forEach((nestedSub, nestedSubIndex) => {\n                                nestedSubNodeIndex = nestedSubIndex\n                                nestedSub.id = `node${index}_subNode${subNodeIndex}_nestedSubNode${nestedSubNodeIndex}`\n                            })\n                        }\n                    })\n                    return {\n                        ...node,\n                        value: index,\n                    }\n                })\n\n                nextTick(() => {\n                    initMap()\n                    getCurrentMapData()\n                })\n            })\n            state.comSize.wrapHeight = window.innerHeight\n            state.comSize.wrapWidth = window.innerWidth\n            store.dispatch('updateWindowWidth', window.innerWidth)\n            window.onresize = (e) => {\n                state.comSize.wrapHeight = e.target.innerHeight\n                state.comSize.wrapWidth = e.target.innerWidth\n                store.dispatch('updateWindowWidth', window.innerWidth)\n            }\n        })\n\n        function add() {\n            ol3d.getCesiumScene().imageryLayers.addImageryProvider(\n                new Cesium.WebMapServiceImageryProvider({\n                    url: 'https://dwgis1.ncdr.nat.gov.tw/server/services/MAP0627/Map2022FaultGeoSensitiveArea/MapServer/WMSServer',\n                    layers: '0',\n                    parameters: {\n                        'FORMAT': 'image/png',\n                        'VERSION': '1.1.1',\n                        'TRANSPARENT': 'TRUE',\n                        'SRS': 'EPSG:4326' // 更改投影为 EPSG:4326 (WGS84)\n                    },\n                }),\n            )\n        }\n\n        function show() {\n            window.console.log('ol3d', ol3d)\n            let imageryLayers = ol3d.getCesiumScene().imageryLayers\n            let imageryLayersCount = imageryLayers.length\n            for (let i = 0; i < imageryLayersCount; i++) {\n                let layer = imageryLayers.get(i)\n                window.console.log(1, layer)\n                // .imageryProvider._resource?.queryParameters\n\n                // get queryParameters\n                // if (layer.imageryProvider.layers === pickedLayer.title) {\n                //     imageryLayers.remove(layer);\n                // }\n            }\n        }\n\n        return {\n            state,\n            props,\n            store,\n            mapControl,\n            layerControl,\n            onChangeLayerVisible,\n            onChangeLayerOpacity,\n            changeTarget,\n            conditionWrap,\n            closeAreaData,\n            moveToMap,\n            changeMapCount,\n            onChangeDimensionMap,\n            show,\n        }\n    },\n}\n</script>\n\n<template>\n    <!-- <div @click=\"show\">show</div> -->\n    <div>\n        <!-- TODO: 寬度設定是否調整 -->\n        <div class=\"w-100 d-flex justify-content-between flex-sm-row flex-wrap flex-sm-nowrap mapWrap\" id=\"mapWrap\">\n            <div id=\"map1\" :class=\"{\n            'w-100': state.map1?.getTarget() == 'map1',\n            'h-100': state.mapCount === 1,\n            'h-50': state.mapCount === 2 && (state.comSize.wrapWidth < 600),\n            'middleMap': state.map1?.getTarget()\n        }\">\n            </div>\n            <div class=\"middleLine\" v-if=\"state.mapCount === 2\"></div>\n            <div id=\"map2\" :class=\"{\n            'w-100': state.map2?.getTarget() == 'map2',\n            'h-100': state.mapCount === 1,\n            'h-50': state.mapCount === 2 && (state.comSize.wrapWidth < 600),\n            'middleMap': state.map2?.getTarget()\n        }\">\n            </div>\n        </div>\n        <asideTool class=\"asideTool position-absolute top-50 translate-middle-y\" id=\"asideTool\" :onChangeTarget=\"(value) => {\n            changeTarget(value)\n        }\" @onMapControl=\"({ action, value }) => {\n            mapControl({ action, value })\n        }\" />\n        <div class=\"SearchBar d-block d-sm-block position-fixed w-100 w-sm-auto position-sm-absolute p-3 p-sm-0\">\n            <div class=\"d-flex align-items-center justify-content-between justify-content-sm-start\">\n                <img src=\"@/assets/logo.svg\" alt=\"\" class=\"logo col-5 col-sm-auto me-0 me-sm-5\">\n                <mapSourceOption class=\"mapSourceOption col-5 col-sm-auto d-block d-sm-block\"\n                :baseMapList=\"state.temp.baseMapList\" :onChangeBaseMaps=\"({ action, value }) => {\n                    layerControl({ action, value })\n                }\" />\n            </div>\n            <SearchBar class=\"mt-4 d-none d-sm-block\" v-bind=\"{\n            dimensionMapStatus: state.toSearchDimensionStatus,\n            currentLayers: state.currentLayers,\n            mapCount: state.mapCount,\n            onChangeBaseMaps: ({ action, value }) => {\n                layerControl({ action, value })\n            },\n            onChangeMapCount: (qty) => {\n                changeMapCount(qty)\n            },\n            }\"\n            :onChangeTarget=\"(value) => {\n                changeTarget(value)\n            }\"\n            @onLayerControl=\"({ action, value }) => {\n                layerControl({ action, value })\n            }\"\n            @conditionWrap=\"(value) => {\n                conditionWrap(value)\n            }\"\n            :onChangeDimensionMap=\"(value)=>{\n                onChangeDimensionMap(value)\n            }\" />\n        </div>\n\n        <div class=\"conditionCom d-none d-sm-block position-absolute\">\n            <div class=\"mb-4\">\n                <button class=\"border-0 w-100 rounded-4 bg-steel text-white text-center p-2 fw-bold fs-5\"\n                    v-if=\"!state.conditionWrap\" @click=\"state.conditionWrap = true\">\n                    圖層選項\n                </button>\n                <div class=\"mb-4\" v-if=\"state.conditionWrap\">\n                    <Condition v-bind=\"{\n            tribeQuery: state.tribeQuery,\n            mapLayers: state.mapLayers,\n            currentLayers: state.currentLayers,\n            onClose: () => {\n                state.conditionWrap = false\n            },\n            showSelectLayerValue: (val) => {\n                state.selectValueTemp = val\n            },\n            moveToMap: (val) => {\n                moveToMap(val)\n            }\n        }\"\n        @onLayerControl=\"({ action, value }) => { layerControl({ action, value }) }\" />\n                </div>\n                <OverLayer :text=\"'可選擇要加入的圖層'\" :styles=\"'right: 105%;top: 0;text-align: right;'\" />\n            </div>\n\n            <div>\n                <button class=\"border-0 w-100 rounded-4 bg-steel text-white text-center p-2 fw-bold fs-5\"\n                    v-if=\"!state.layerSelect\" @click=\"state.layerSelect = true\">\n                    已選擇的圖層\n                </button>\n                <div v-if=\"state.layerSelect\">\n                    <!-- TODO: onChangeLayerOpacity帶入而不是走onLayerControl -->\n                    <LayerSelector\n                    v-bind=\"{\n                        selectLock: state.selectLock,\n                        currentLayers: state.currentLayers,\n                        onClose: () => {\n                            state.layerSelect = false\n                        },\n                        onLockLayer: () => {\n                            state.selectLock = !state.selectLock\n                        },\n                        onDeleteLayer: ({ action, value }) => {\n                            if (value.layerName == 'all') {\n                                state.deleteLightbox = true\n                            } else {\n                                layerControl({ action, value })\n                            }\n                        },\n                        onLayerControl: ({ action, value }) => {\n                            layerControl({ action, value })\n                        },\n                        onChangeLayerVisible: (key) => {\n                            onChangeLayerVisible(key)\n                        },\n                        onChangeLayerOpacity: (key, value) => {\n                            onChangeLayerOpacity(key, value)\n                        }\n                    }\" />\n                </div>\n                <OverLayer :text=\"'顯示已經選擇的圖層'\" :styles=\"'right: 105%;top: 0;text-align: right;'\" />\n            </div>\n        </div>\n\n        <div class=\"m-Navbar d-flex d-sm-none position-relative w-100\">\n            <div class=\"position-absolute bottom-100 w-100\" style=\"max-height: 70vh;overflow-y: scroll;\">\n                <Condition class=\"w-100\" v-if=\"state.conditionWrap\"\n                v-bind=\"{\n                    mapLayers: state.mapLayers,\n                    currentLayers: state.currentLayers,\n                    onClose: () => {\n                        state.conditionWrap = false\n                    },\n                    showSelectLayerValue: (val) => {\n                        state.selectValueTemp = val\n                    }\n                }\"\n                @onLayerControl=\"({ action, value }) => { layerControl({ action, value }) }\" />\n            </div>\n            <div v-if=\"state.layerSelect\">\n                <LayerSelector class=\"position-absolute bottom-100 w-100\" v-bind=\"{\n                    selectLock: state.selectLock,\n                    currentLayers: state.currentLayers,\n                    onClose: () => {\n                        state.layerSelect = false\n                    },\n                    onLockLayer: () => {\n                        state.selectLock = !state.selectLock\n                    },\n                    onDeleteLayer: ({ action, value }) => {\n                        if (value.layerName == 'all') {\n                            state.deleteLightbox = true\n                        } else {\n                            layerControl({ action, value })\n                        }\n                    },\n                    onChangLayerVisible: (action) => {\n                        layerControl(action)\n                    },\n                    onChangeOrderLayer: ({ action, value }) => {\n                        layerControl({ action, value })\n                    },\n                    onLayerControl: ({ action, value }) => {\n                        layerControl({ action, value })\n                    },\n                }\" />\n            </div>\n        </div>\n\n        <div class=\"lightWrap w-100 h-100 d-flex justify-content-center align-items-center\" v-if=\"state.deleteLightbox\">\n            <div class=\"p-4 rounded bg-white\" style=\"width: 250px;\">\n                <p class=\"text-center fw-bold\">是否要取消全部圖層</p>\n                <div class=\" d-flex justify-content-around\">\n                    <button class=\"rounded px-3 py-1 bg-steel text-white border-0\" @click=\"() => {\n            layerControl({\n                action: 'selectLayerMode',\n                value: {\n                    layerName: 'all'\n                }\n            })\n            state.deleteLightbox = false\n        }\">確定</button>\n                    <button class=\"rounded px-3 py-1 bg-secondary bg-gradient text-white border-0\" @click=\"() => {\n            state.deleteLightbox = false\n        }\">取消</button>\n                </div>\n            </div>\n        </div>\n\n        <div id=\"popup\" class=\"popup position-absolute bottom-0\" :ref=\"(e) => {\n            state.popup.nodeRef = e\n        }\">\n            <areaData class=\"areaData\" v-if=\"state.popup.popupId !== 0\" :closeAreaData=\"() => {\n            closeAreaData()\n        }\" :popup=\"state.popup\" :maxHeight=\"500\" />\n        </div>\n    </div>\n</template>\n\n<style lang=\"sass\">\n@import '@/assets/styles/all.module.scss'\n.mapWrap\n  height: 100vh\n\n.asideTool\n  z-index: 220\n  left: 20px\n\n.SearchBar\n  top: 20px\n  left: 20px\n  z-index: 220\n\n.conditionCom\n  width: 480px\n  right: 1%\n  bottom: 5%\n\n.middleLine\n  width: 5px\n  background: $blue-steel\n\n.popup\n  z-index: 9999\n\n.areaData\n  width: 450px\n  max-height: 550px\n  background: #fff\n  box-sizing: border-box\n  border-radius: 10px\n  border: 1px solid #088\n\n.middleMap\n  position: relative\n\n  &::after\n    content: ''\n    position: absolute\n    display: block\n    border: 2px solid #000\n    width: 40px\n    height: 40px\n    top: calc((100% - 40px) / 2)\n    left: calc((100% - 40px) / 2)\n\n@media (max-width: 600px)\n  .mapWrap\n    height: 92%\n  .m-Navbar\n    z-index: 222\n    height: 8%\n  .SearchBar\n    top: 0\n    left: 0\n\n    .logo\n      width: 180px\n  .asideTool\n    left: 5px\n  .middleLine\n    height: 1px\n    width: 100%\n  .areaData\n    width: 85vw\n</style>\n"],"names":["_sfc_main","props","emit","store","useStore","state","reactive","node","index","computed","target","initMap","Map","defaultView","ScaleLine","addPoint","targetLng","targetLat","Point","Style","Icon","mapControl","action","View","mainMap","value","xAxis","yAxis","layerControl","targetLayers","nestedSubNodeIndex","isSingleTiles","haveInfoBox","scene","ol3d","i","imageryLayersCount","layer","imageSubNodeIndex","_d","getMapLayers","id","imageNodeIndex","request","element","targetLayer","currentLayerKey","tilesImageUrls","imageExtent","timeKey","newSource","mapClickEvent","pickedLayer","nodeIndex","subNodeIndex","_i","layersAry","_a","deleteKey","removeLayersById","obj","XYZ","newTileLayer","onChangeLayerOpacity","getCurrentMapData","provider","_b","layers","_c","onChangeDimensionMap","ta","layerToRemove","drawDimensionMap","OLCesium","onChangeLayerVisible","key","qty","otherLayersData","otherMap","item","mapLayerList","otherLayers","baseMapList","delToMap","onMapLayerStatus","a","click","selector","event","selectedFeatures","Overlay","selectIds","addSelectElement","layerName","checked","$","res","val","onMounted","result","getBaseMapAll","sub","subIndex","nestedSubIndex","nestedSub","e","show","imageryLayers","moveToMap","changeMapCount","_hoisted_3","_hoisted_4","_imports_0","_hoisted_6","_hoisted_7","_hoisted_10","_hoisted_15","_createElementVNode","_hoisted_16","_hoisted_1","$setup","_openBlock","_createElementBlock","_hoisted_2","_createVNode","_component_SearchBar","_mergeProps","_cache","_hoisted_8","_component_Condition","_hoisted_11","_createBlock","_component_LayerSelector","_hoisted_13","_hoisted_14"],"mappings":"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"}